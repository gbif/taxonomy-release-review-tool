{"version":3,"sources":["serviceWorker.js","components/Root.js","index.js"],"names":["Boolean","window","location","hostname","match","Search","Input","Option","Select","verbatimPrefix","currentPrefix","proposedPrefix","ranksToCompare","fieldsToCompare","tableColumns","csvFallback","url_string","href","customCsv","URL","searchParams","get","Root","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadfromUrl","url","Papa","parse","download","delimiter","header","dynamicTyping","complete","result","rowIndex","changeSummary","forEach","rank","field","data","row","_key","changes","concat","columns","map","title","key","dataIndex","sorter","a","b","localeCompare","sortDirections","filters","text","value","filterMultiple","onFilter","record","render","isDifferent","smallDifference","toLowerCase","replace","perfectMatchChanged","changedToPerfectMatch","react_default","createElement","className","tooltip","count","Number","toLocaleString","val","Fragment","keys","f","x","getIssueSubjectText","getIssueBodyText","target","rel","setState","dataSource","unfilteredData","error","err","console","log","template","encodeURIComponent","JSON","stringify","expandedRowRender","handleSearch","q","searchCol","state","filter","indexOf","csvUrl","pageSize","_this2","style","padding","gutter","col","span","es_select","defaultValue","width","onChange","placeholder","enterButton","onSearch","overflow","table","bordered","scroll","pagination","size","rowKey","React","Component","ReactDOM","components_Root","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47e28e92.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Tooltip, Select, Table, Input, Row, Col } from 'antd';\nimport Papa from 'papaparse';\n\nconst { Search } = Input;\nconst { Option } = Select;\n\nconst verbatimPrefix = 'verbatim_';\nconst currentPrefix = 'current_';\nconst proposedPrefix = 'proposed_';\n\nconst ranksToCompare = ['kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'subGenus', 'species', 'scientificName'];\nconst fieldsToCompare = ['acceptedScientificName', 'taxonKey'];\nconst tableColumns = ['kingdom', 'phylum', 'class', 'order', 'family', 'genus', 'subGenus', 'species', 'scientificName', 'acceptedScientificName'];\n\nconst csvFallback = '/diff.txt';\n\nvar url_string = window.location.href\nvar url = new URL(url_string);\nvar customCsv = url.searchParams.get(\"csv\");\n\nclass Root extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      csvUrl: customCsv || csvFallback,\n      searchCol: 'scientificName',\n      pageSize: 20\n    };\n  }\n\n  componentDidMount() {\n    this.loadfromUrl(this.state.csvUrl);\n  }\n\n  loadfromUrl = url => {\n    Papa.parse(url, {\n      download: true,\n      delimiter: \"\\t\",\n      header: true,\n      dynamicTyping: true,\n      complete: result => {\n\n        // const expandedRowColumns = Object.keys(result.data[0]).map(col => (\n        //   { title: col, key: col, dataIndex: col }\n        // ));\n\n        let rowIndex = 0;\n\n        let changeSummary = {};\n        ranksToCompare.forEach(rank => changeSummary[rank] = 0);\n        fieldsToCompare.forEach(field => changeSummary[field] = 0);\n\n        result.data.forEach(row => {\n          // All rows need a unique key for the table to render\n          row._key = rowIndex++;\n          row.changes = {};\n\n          // Add derrived flags - this should be in the csv, but we have decided that as an interim solution it will be here.\n          ranksToCompare.forEach(rank => {\n            if (row[`${currentPrefix}${rank}`] !== row[`${proposedPrefix}${rank}`]) {\n              row.changes[rank] = true;\n              changeSummary[rank]++;\n            }\n            if (row[`${currentPrefix}${rank}Key`] !== row[`${proposedPrefix}${rank}Key`]) {\n              row.changes[`${rank}Key`] = true;\n              changeSummary[`${rank}Key`]++;\n            }\n          });\n          fieldsToCompare.forEach(field => {\n            if (row[`${currentPrefix}${field}`] !== row[`${proposedPrefix}${field}`]) {\n              row.changes[field] = true;\n              changeSummary[field]++;\n            }\n          });\n        });\n\n        // contruct main columns for table\n        let columns = tableColumns.map(rank => {\n          return {\n            title: rank, key: rank, dataIndex: `${currentPrefix}${rank}`,\n            sorter: (a, b) => a[`${currentPrefix}${rank}`].localeCompare(b[`${currentPrefix}${rank}`]),\n            sortDirections: ['descend', 'ascend'],\n            filters: [\n              {\n                text: `Has changed name(${changeSummary[rank]})`,\n                value: true,\n              },\n              {\n                text: 'Has not changed name',\n                value: false,\n              },\n            ],\n            filterMultiple: false,\n            onFilter: (value, record) => !!record.changes[rank] === value,\n            render: (text, record) => {\n              const isDifferent = record[`${proposedPrefix}${rank}`] !== text;\n              const smallDifference = isDifferent && record[`${proposedPrefix}${rank}`].toLowerCase().replace(/[()]/g, '') === text.toLowerCase().replace(/[()]/g, '');\n              const perfectMatchChanged = record[`${verbatimPrefix}${rank}`] === text && isDifferent;\n              const changedToPerfectMatch = record[`${verbatimPrefix}${rank}`] === record[`${proposedPrefix}${rank}`] && isDifferent;\n              return <div className={`nowrap ${ isDifferent ? 'hasChanged' : 'isSame' } ${ smallDifference ? 'smallChange' : '' }`}>\n                  <Tooltip title={`${isDifferent ? rank + ' has changed' : ''}${smallDifference ? ' (casing and/or parenthesis' : ''}${perfectMatchChanged ? ' - current equals verbatim' : ''}${changedToPerfectMatch ? ' - propsed equals verbatim' : ''}`}>\n                    <div className={ perfectMatchChanged ? 'perfectMatchChanged' : '' }>{text}</div>\n                    <div className={ changedToPerfectMatch? 'changedToPerfectMatch' : '' }>{record[`${proposedPrefix}${rank}`] !== text ? record[`${proposedPrefix}${rank}`] : '\\u00A0'}</div>\n                </Tooltip>\n              </div>;\n            }\n          }\n        });\n\n        // add columns for counts, changes and actions\n        columns = [\n          {\n            title: 'count',\n            key: 'count',\n            dataIndex: 'count',\n            sorter: (a, b) => a.count - b.count,\n            sortDirections: ['descend', 'ascend'],\n            render: text => Number(text).toLocaleString()\n          }\n        ].concat(columns).concat(\n          {\n            title: 'Changes',\n            key: 'changes',\n            dataIndex: 'changes',\n            render: (val, record) => <React.Fragment>{Object.keys(val).map(f => <span key={f}>{f}, </span>)}</React.Fragment>,\n            filters: Object.keys(changeSummary).map(x => {\n              return { text: x, value: x };\n            }),\n            filterMultiple: true,\n            onFilter: (value, record) => {\n              return record.changes[value] > 0\n            },\n          },\n          {\n            title: 'Action',\n            key: 'operation',\n            render: (text, record) => <a href={`https://github.com/gbif/checklistbank/issues/new?title=${this.getIssueSubjectText(record)}&body=${this.getIssueBodyText(record)}&labels=bug`} target=\"_blank\" rel=\"noopener noreferrer\">Report</a>,\n          }\n        );\n\n        this.setState({\n          columns,\n          dataSource: result.data,\n          unfilteredData: result.data,\n          // expandedRowColumns\n        });\n      },\n      error: err => {\n        console.log(err);\n      },\n    });\n  }\n\n  getIssueSubjectText = record => {\n    let template = `Regression for ${record[`${currentPrefix}scientificName`]}`;\n    return encodeURIComponent(template);\n  }\n\n  getIssueBodyText = record => {\n    let template = `\\`\\`\\`\\n${JSON.stringify(record, null, 2)}\\n\\`\\`\\``;\n    return encodeURIComponent(template);\n  }\n\n  expandedRowRender = record => {\n    return <p><pre>{JSON.stringify(record, null, 2)}</pre></p>\n    // return <Table columns={this.state.expandedRowColumns} dataSource={[record]} pagination={false} />;\n  };\n\n  handleSearch = (q, searchCol) => {\n    this.setState({\n      q,\n      searchCol,\n      dataSource: this.state.unfilteredData.filter(record => {\n        return record[`${currentPrefix}${searchCol}`].indexOf(q) > -1 || record[`${proposedPrefix}${searchCol}`].indexOf(q) > -1;\n      })\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div>\n          <div style={{ padding: 20 }}>\n            <Row gutter={16}>\n              <Col span={4}>\n                <Select defaultValue={this.state.searchCol} style={{ width: '100%' }} onChange={value => this.handleSearch(this.state.q, value)}>\n                  {tableColumns.map(x => <Option value={x} key={x}>{x}</Option>)}\n                </Select>\n              </Col>\n              <Col span={12}>\n                <Search\n                  placeholder=\"Search names\"\n                  enterButton=\"Search\"\n                  onSearch={value => this.handleSearch(value, this.state.searchCol)}\n                />\n              </Col>\n              <Col span={4}>\n                <Select defaultValue={this.state.pageSize} style={{ width: '100%' }} onChange={value => this.setState({pageSize: value})}>\n                  {[10,20,50,100,250,1000].map(x => <Option value={x} key={x}>{x}</Option>)}\n                </Select>\n              </Col>\n            </Row>\n          </div>\n\n          {this.state.dataSource &&\n            <div style={{overflow: 'auto', width: '100%'}}>\n              <Table dataSource={this.state.dataSource} columns={this.state.columns}\n                bordered={true}\n                scroll={{ x: 870 }}\n                pagination={{\n                  pageSize: this.state.pageSize,\n                }}\n                size=\"middle\"\n                expandedRowRender={this.expandedRowRender}\n                rowKey=\"_key\"\n              />\n            </div>\n          }\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport Root from './components/Root';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <Root/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}